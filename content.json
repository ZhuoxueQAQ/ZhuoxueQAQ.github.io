{"meta":{"title":"Zhuoxue的个人博客","subtitle":"","description":"","author":"Zhuoxue","url":"http://yoursite.com","root":"/"},"pages":[{"title":"404","date":"2020-08-29T03:42:21.000Z","updated":"2020-08-29T03:43:11.695Z","comments":true,"path":"404/index.html","permalink":"http://yoursite.com/404/index.html","excerpt":"","text":""},{"title":"categories","date":"2020-08-29T03:29:39.000Z","updated":"2020-08-29T03:34:01.912Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2020-08-29T03:30:30.000Z","updated":"2020-08-29T03:33:14.406Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"ts基础语法","slug":"ts基础语法","date":"2020-08-28T12:48:16.000Z","updated":"2020-08-28T15:31:08.805Z","comments":true,"path":"2020/08/28/ts基础语法/","link":"","permalink":"http://yoursite.com/2020/08/28/ts%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/","excerpt":"","text":"ts变量与数据类型变量 定义变量 1let userName:string = &#x27;zhuoxue&#x27;; 在ts中，对指定了类型的变量只能设置相同类型的值，和js不同 12let userName:string = &#x27;zhuoxue&#x27;;userName = 233; //类型非法 常用数据类型 字符串 1let userName: string = &#x27;zhuoxue&#x27;; 数值类型 12let testCount: number = 123;testCount = 123.45; 布尔型 123let isUser: boolean = true;isUser = false;// 要注意的是ts不能像js一样把true等价为1，false等价为0 undefined和null 数组 123456// 方式1let userList: string[] = [&#x27;qqq&#x27;,&#x27;www&#x27;];// 方式2：泛型语法let userList: Array&lt;string&gt; = [&#x27;qaq&#x27;,&#x27;qwq&#x27;];// 与js不同，ts定义数组要指定其中元素的数据类型，里面只能放相同类型的元素// 数组长度没有限制 元组 123let tup1: [string, number, bollean] = [&#x27;喜欢&#x27;, 520, true];alert(tup1[0]);console.log(tup1.length); 枚举 12345678910111213enum GunType &#123; m416 = 1, ak47 = 2, goza = 3&#125;// 默认枚举值从0开始enum GunType &#123; m416, //0 ak47, //1 goza //2&#125;// 使用枚举对象let userGun: GunType = GunType.m416; any any代表任意类型，一般在获取dom时使用。此外，接受用户输入或者第三方代码库时，尚未确定返回什么类型的值，也可使用any类型 12// 示例let txtName: any = document.getElementById(&#x27;txtN&#x27;); void 无类型，一般在无返回值的函数中使用 never 不存在的值的类型，常用作为抛出异常或者无限循环的函数的返回类型 12345678function test():never &#123; while(true)&#123; &#125;&#125;function test1():never &#123; throw new Error(&#x27;error&#x27;);&#125; never类型为ts中的底部类型，所有类型都是never类型的父类，所以never类型值可以赋给任意类型的变量 类型推断当变量的声明和初始化在一行时，可以省略变量类型的声明 12let userName = &#x27;zhuoxue&#x27;; //此时userName为字符串类型userName = 123; //非法 联合类型表示变量的取值可以为多种类型中的一种 12let userName: string | null = prompt(&#x27;input username:&#x27;);console.log(&#x27;hello&#x27; + userName);","categories":[],"tags":[{"name":"typescript","slug":"typescript","permalink":"http://yoursite.com/tags/typescript/"}]},{"title":"配置typescript","slug":"配置typescript","date":"2020-08-28T12:31:25.000Z","updated":"2020-08-28T15:30:18.692Z","comments":true,"path":"2020/08/28/配置typescript/","link":"","permalink":"http://yoursite.com/2020/08/28/%E9%85%8D%E7%BD%AEtypescript/","excerpt":"","text":"使用npm安装typescript12npm install -g typescripttsc -v 使用vscode自动将.ts文件编译为js文件 在终端运行以下代码创建tsconfig.json文件 1tsc --init 修改tsconfig文件，设置js文件存储目录 1&quot;outDir&quot;: &quot;.&#x2F;js&#x2F;&quot;, &#x2F;* Redirect output structure to the directory. *&#x2F; 设置vscode监视任务 使用在html页面中引入编译得到的js文件即可","categories":[],"tags":[{"name":"typescript","slug":"typescript","permalink":"http://yoursite.com/tags/typescript/"}]},{"title":"使用hexo和github搭建博客","slug":"使用hexo和github搭建博客","date":"2020-08-28T06:33:43.000Z","updated":"2020-08-28T15:32:06.380Z","comments":true,"path":"2020/08/28/使用hexo和github搭建博客/","link":"","permalink":"http://yoursite.com/2020/08/28/%E4%BD%BF%E7%94%A8hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/","excerpt":"","text":"安装和使用hexo安装hexo 安装node.js（内置npm） 全局安装cnpm： 1cnpm：npm install -g cnpm 安装hexo并验证安装： 12hexo：cnpm install -g hexohexo -v 使用hexo搭建博客 在目录文件夹git bash，并初始化hexo项目： 1hexo init 新建博客（新建的md文件存储在./source/_post下）： 1hexo n &quot;博客标题&quot; 生成hexo项目： 1hexo g 本地启动项目： 1hexo s 清空配置： 1hexo clean 将博客在github上部署建立github存储库 登录github账号，新建存储库。存储库名称为昵称.github.io 修改GitHub Pages配置，类型为master，并保存 选择任意主题即可 部署 修改项目根目录下的_config.yml文件中的Deployment选项： 123456# Deployment## Docs: https:&#x2F;&#x2F;hexo.io&#x2F;docs&#x2F;one-command-deploymentdeploy: type: git repo: https:&#x2F;&#x2F;github.com&#x2F;ZhuoxueQAQ&#x2F;ZhuoxueQAQ.github.io.git branch: master 要注意的是键的后面要有一个空格，否则无效 安装git部署插件： 1cnpm install --save hexo-deployer-git 安装完成后使用hexo清除历史配置，生成项目，并部署： 123hexo cleanhexo ghexo d 访问ZhuoxueQAQ.github.io即可。","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2020-08-28T03:44:20.854Z","updated":"2020-08-28T10:34:40.907Z","comments":true,"path":"2020/08/28/hello-world/","link":"","permalink":"http://yoursite.com/2020/08/28/hello-world/","excerpt":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[],"tags":[{"name":"typescript","slug":"typescript","permalink":"http://yoursite.com/tags/typescript/"}]}